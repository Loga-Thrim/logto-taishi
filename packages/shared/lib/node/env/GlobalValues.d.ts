import UrlSet from './UrlSet.js';
export default class GlobalValues {
    readonly isProduction: boolean;
    readonly isIntegrationTest: boolean;
    readonly isUnitTest: boolean;
    readonly httpsCert: string | undefined;
    readonly httpsKey: string | undefined;
    readonly isHttpsEnabled: boolean;
    /**
     * The UrlSet with no prefix for Logto core service. It serves requests to the OIDC Provider and Management APIs
     * from all tenants.
     *
     * Especially, a glob (`*`) is allowed for the hostname of its property `endpoint` to indicate if the domain-based multi-tenancy (DBMT)
     * is enabled which affects some critical behaviors of Logto.
     *
     * **When DBMT is enabled**
     *
     * - For non-admin tenants, tenant endpoint will be generated by replacing the glob in the `urlSet.endpoint`.
     * - For admin tenant, if `adminUrlSet` has no endpoint available, tenant endpoint will be generated by replacing the glob in the `urlSet.endpoint`.
     * - Admin Console will NOT be served under admin tenant since the cloud service will do.
     * - Incoming requests will use glob matching to parse the tenant ID from the request URL.
     *
     * ```ts
     * // ENDPOINT='https://*.domain.com'
     * getTenantEndpoint('foo') => 'https://foo.domain.com'
     * ```
     *
     * **When DBMT is disabled**
     *
     * - For non-admin tenants, tenant endpoint will always be `urlSet.endpoint`.
     * - For admin tenant, tenant endpoint will always be `adminUrlSet.endpoint`.
     * - Admin Console will be served under admin tenant.
     * - Incoming requests will check whether the URL matches adminUrlSet.endpoint, which indicates the admin tenant ID. If there is no match, the default tenant ID will be used.
     */
    readonly urlSet: UrlSet;
    /**
     * The UrlSet with prefix `ADMIN_` for Logto admin tenant. To completely disable it, set `ADMIN_DISABLE_LOCALHOST` to a truthy value and leave `ADMIN_ENDPOINT` unset.
     *
     * Should be disabled on the cloud.
     *
     * @see urlSet For mutual effects between these two sets.
     */
    readonly adminUrlSet: UrlSet;
    /**
     * The UrlSet with prefix `CLOUD_` for Logto cloud service. It affects Admin Console Redirect URIs and some CORS configuration.
     */
    readonly cloudUrlSet: UrlSet;
    /** @see urlSet For detailed explanation. */
    readonly isDomainBasedMultiTenancy: boolean;
    /**
     * **NOTE: This is an internal dev-only feature.**
     *
     * This value indicates path-based multi-tenancy (PBMT) is enabled by setting env variable `PATH_BASED_MULTI_TENANCY` to a truthy value.
     *
     * Note the value will always be `false` if domain-based multi-tenancy is enabled.
     *
     * **When PBMT is enabled**
     *
     * - For non-admin tenants, tenant endpoint will be generated by appending the tenant ID to `urlSet.endpoint`.
     * - For admin tenant, if `adminUrlSet` has no endpoint available, tenant endpoint will be generated by appending the tenant ID to `urlSet.endpoint`.
     * - Admin Console will NOT be served under admin tenant since the cloud service will do.
     * - Incoming requests will try to match the position of pathname segments of the URLs in `urlSet.deduplicated()` to parse the tenant ID from the request URL.
     *
     * ```ts
     * // ENDPOINT='https://domain.com/foo'
     * getTenantEndpoint('bar') => 'https://domain.com/foo/bar'
     * matchTenantId('https://domain.com/foo/bar') => 'bar'
     * matchTenantId('http://localhost:3001/foo/bar') => 'foo'
     * ```
     *
     * @see urlSet
     */
    readonly isPathBasedMultiTenancy: boolean;
    /** Alias for `isDomainBasedMultiTenancy || isPathBasedMultiTenancy`. */
    get isMultiTenancy(): boolean;
    /** If the env explicitly indicates it's in the cloud environment. */
    readonly isCloud: boolean;
    readonly databaseUrl: string;
    readonly developmentTenantId: string;
    readonly userDefaultRoleNames: string[];
    readonly developmentUserId: string;
    readonly trustProxyHeader: boolean;
    readonly ignoreConnectorVersionCheck: boolean;
    /** Maximum number of tenants to keep in the tenant pool. */
    readonly tenantPoolSize: number;
    /** Maximum number of clients to keep in a single database pool (i.e. per `Tenant` class). */
    readonly databasePoolSize: number;
    /**
     * The Redis endpoint (optional). If it's set, the central cache mechanism will be automatically enabled.
     *
     * You can set it to a truthy value like `true` or `1` to enable cache with the default Redis URL.
     */
    readonly redisUrl: string;
    get dbUrl(): string;
    get endpoint(): URL;
    constructor();
}
