"use strict";
// LOG-88: Refactor '@logto/schemas' type gen
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSchema = void 0;
var essentials_1 = require("@silverhand/essentials");
var camelcase_1 = require("camelcase");
var pluralize_1 = require("pluralize");
// Tenant ID should be optional for create types since it'll be generated by the database trigger
var tenantId = 'tenant_id';
var generateSchema = function (_a) {
    var name = _a.name, fields = _a.fields;
    var modelName = (0, pluralize_1.default)((0, camelcase_1.default)(name, { pascalCase: true }), 1);
    var databaseEntryType = "Create".concat(modelName);
    return __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([
        "export type ".concat(databaseEntryType, " = {")
    ], fields.map(function (_a) {
        var name = _a.name, comments = _a.comments, type = _a.type, isArray = _a.isArray, nullable = _a.nullable, hasDefaultValue = _a.hasDefaultValue;
        return (0, essentials_1.conditionalString)(comments && "  /**".concat(comments, "*/\n")) +
            "  ".concat((0, camelcase_1.default)(name)).concat((0, essentials_1.conditionalString)((nullable || hasDefaultValue || name === tenantId) && '?'), ": ").concat(type).concat((0, essentials_1.conditionalString)(isArray && '[]')).concat((0, essentials_1.conditionalString)(nullable && !hasDefaultValue && ' | null'), ";");
    }), true), [
        '};',
        '',
        "export type ".concat(modelName, " = {")
    ], false), fields.map(function (_a) {
        var name = _a.name, comments = _a.comments, type = _a.type, isArray = _a.isArray, nullable = _a.nullable, hasDefaultValue = _a.hasDefaultValue;
        return (0, essentials_1.conditionalString)(comments && "  /**".concat(comments, "*/\n")) +
            "  ".concat((0, camelcase_1.default)(name), ": ").concat(type).concat((0, essentials_1.conditionalString)(isArray && '[]')).concat(nullable && !hasDefaultValue ? ' | null' : '', ";");
    }), true), [
        '};',
        '',
        "const createGuard: CreateGuard<".concat(databaseEntryType, "> = z.object({")
    ], false), fields.map(
    // eslint-disable-next-line complexity
    function (_a) {
        var name = _a.name, type = _a.type, isArray = _a.isArray, isEnum = _a.isEnum, nullable = _a.nullable, hasDefaultValue = _a.hasDefaultValue, tsType = _a.tsType, isString = _a.isString, maxLength = _a.maxLength;
        if (tsType) {
            return "  ".concat((0, camelcase_1.default)(name), ": ").concat((0, camelcase_1.default)(tsType), "Guard").concat((0, essentials_1.conditionalString)(nullable && '.nullable()')).concat((0, essentials_1.conditionalString)((nullable || hasDefaultValue) && '.optional()'), ",");
        }
        return "  ".concat((0, camelcase_1.default)(name), ": z.").concat(isEnum ? "nativeEnum(".concat(type, ")") : "".concat(type, "()")).concat(
        // Non-nullable strings should have a min length of 1
        (0, essentials_1.conditionalString)(isString && !(nullable || name === tenantId) && ".min(1)")).concat(
        // String types value in DB should have a max length
        (0, essentials_1.conditionalString)(isString && maxLength && ".max(".concat(maxLength, ")"))).concat((0, essentials_1.conditionalString)(isArray && '.array()')).concat((0, essentials_1.conditionalString)(nullable && '.nullable()')).concat((0, essentials_1.conditionalString)((nullable || hasDefaultValue || name === tenantId) && '.optional()'), ",");
    }), true), [
        '});',
        '',
        "const guard: Guard<".concat(modelName, "> = z.object({")
    ], false), fields.map(
    // eslint-disable-next-line complexity
    function (_a) {
        var name = _a.name, type = _a.type, isArray = _a.isArray, isEnum = _a.isEnum, nullable = _a.nullable, tsType = _a.tsType, isString = _a.isString, maxLength = _a.maxLength, hasDefaultValue = _a.hasDefaultValue;
        if (tsType) {
            return "  ".concat((0, camelcase_1.default)(name), ": ").concat((0, camelcase_1.default)(tsType), "Guard").concat((0, essentials_1.conditionalString)(nullable && '.nullable()'), ",");
        }
        return "  ".concat((0, camelcase_1.default)(name), ": z.").concat(isEnum ? "nativeEnum(".concat(type, ")") : "".concat(type, "()")).concat(
        // Non-nullable strings should have a min length of 1
        (0, essentials_1.conditionalString)(isString && !(nullable || hasDefaultValue || name === tenantId) && ".min(1)")).concat(
        // String types value in DB should have a max length
        (0, essentials_1.conditionalString)(isString && maxLength && ".max(".concat(maxLength, ")"))).concat((0, essentials_1.conditionalString)(isArray && '.array()')).concat((0, essentials_1.conditionalString)(nullable && '.nullable()'), ",");
    }), true), [
        '  });',
        '',
        "export const ".concat((0, camelcase_1.default)(name, {
            pascalCase: true,
        }), ": GeneratedSchema<").concat(databaseEntryType, ", ").concat(modelName, "> = Object.freeze({"),
        "  table: '".concat(name, "',"),
        "  tableSingular: '".concat((0, pluralize_1.default)(name, 1), "',"),
        '  fields: {'
    ], false), fields.map(function (_a) {
        var name = _a.name;
        return "    ".concat((0, camelcase_1.default)(name), ": '").concat(name, "',");
    }), true), [
        '  },',
        '  fieldKeys: ['
    ], false), fields.map(function (_a) {
        var name = _a.name;
        return "    '".concat((0, camelcase_1.default)(name), "',");
    }), true), [
        '  ] as const,',
        '  createGuard,',
        '  guard,',
        '});',
    ], false).join('\n');
};
exports.generateSchema = generateSchema;
